import scala.Tuple2;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import java.util.Stack;



public final class JavaWordCountDD {
    private static final Pattern SPACE = Pattern.compile(" ");
    public static int tooManySameWords = 0;

    public static void main(String[] args) throws Exception {

        if (args.length < 1) {
            System.err.println("Usage: JavaWordCount <file>");
            System.exit(1);
        }

        SparkConf sparkConf = new SparkConf().setAppName("JavaWordCount").setMaster("local[1]");
        JavaSparkContext ctx = new JavaSparkContext(sparkConf);
        JavaRDD<String> lines = ctx.textFile(args[0], 1);

        Stack<JavaRDD<String>> RDDStack = new Stack();//Stack is used to hold JavaRDDs

        //Always split in half in this case
        double[] weights = new double[2];
        weights[0] = 0.5;
        weights[1] = 0.5;


        RDDStack.push(lines);

        int stackSize = RDDStack.size();
        long count = lines.count();

        System.out.println("Total line number is " + count + " and stack size is " + stackSize);

        while (!RDDStack.isEmpty()) {

            JavaRDD<String> currentLine = RDDStack.pop();
            JavaRDD<String> words = currentLine.flatMap(new FlatMapFunction<String, String>() {
                @Override
                public Iterable<String> call(String s) {
                    return Arrays.asList(SPACE.split(s));
                }
            });

            JavaPairRDD<String, Integer> ones = words.mapToPair(new PairFunction<String, String, Integer>() {
                @Override
                public Tuple2<String, Integer> call(String s) {
                    return new Tuple2<String, Integer>(s, 1);
                }
            });

            JavaPairRDD<String, Integer> counts = ones.reduceByKey(new Function2<Integer, Integer, Integer>() {
                @Override
                public Integer call(Integer i1, Integer i2) {

                    if (i1 + i2 > 20) {
                        tooManySameWords = 1;
                    }
                    return i1 + i2;
                }
            });

            List<Tuple2<String, Integer>> output = counts.collect();
            if (tooManySameWords == 1) {
                if (currentLine.count() > 1) {
                    JavaRDD<String>[] splitLines = currentLine.randomSplit(weights);
                    for (int i = 0; i < splitLines.length; i++) {
                        RDDStack.push(splitLines[i]);
                        System.out.println("Putting id: " + splitLines[i].id());
                    }
                }
                System.out.println("The RDD contains the same word more than 20 times");
                for (Tuple2<?, ?> tuple : output) {
                    System.out.println(tuple._1() + ": " + tuple._2());
                }
                tooManySameWords = 0;
            }
            System.out.println("Currently finishing id: " + currentLine.id());
            stackSize = RDDStack.size();
            count = currentLine.count();

            System.out.println("Total line number is " + count + " and stack size is " + stackSize);
        }
        ctx.stop();
    }
}